import { Connection } from 'typeorm';
import { IUsersRepository } from 'application/ports/IUsersRepository';
import { User } from 'domain/models/User';
import { BaseRepository } from './BaseRepository';
import { GetUserModel } from 'domain/models/GetUserModel';
import { ChangePasswordModel } from 'domain/models/ChangePasswordModel';
import { DoctorModel } from 'domain/models/DoctorModel';
import { HttpService } from '@nestjs/axios';
import { List } from 'lodash';
import { PatientModel } from 'domain/models/PatientModel';
import { AddDoctorPatientRecordModel } from 'domain/models/AddDoctorPatientRecordModel';
import { RecipeModel } from 'domain/models/RecipeModel';
import { GetDrugByNameModel } from 'domain/models/GetDrugByNameModel';
import { GetClinicsByNameModel } from 'domain/models/GetClinicsNameModel';
import { ClinicsModel } from 'domain/models/ClinicsModel';
import { DrugsModel } from 'domain/models/DrugsModel';
import { UserInfoModel } from 'domain/models/UserLastFirstNameModel';
export declare class UsersRepository extends BaseRepository<User> implements IUsersRepository {
    private readonly httpService;
    connection: Connection;
    constructor(connection: Connection, httpService: HttpService);
    getUser(entity: User): Promise<any>;
    signUser(entity: User): Promise<any>;
    signDoctor(entity: User): Promise<any>;
    getDoctor(entity: User): Promise<any>;
    getUserByEmail(entity: GetUserModel): Promise<any>;
    getPatientsByEmail(entity: GetUserModel): Promise<any>;
    getDoctorsByEmail(entity: GetUserModel): Promise<any>;
    changePasswordUser(entity: ChangePasswordModel): Promise<any>;
    changePasswordDoctor(entity: ChangePasswordModel): Promise<any>;
    getAllDoctorsInfo(): Promise<any>;
    getDoctorImagePath(entity: List<DoctorModel>): Promise<any>;
    getPatientImagePathById(entity: List<PatientModel>): Promise<any>;
    getPatientMetaByEmail(entity: User): Promise<any>;
    getUserIdByEmail(entity: User): Promise<any>;
    getPatientInfoByEmail(entity: User): Promise<any>;
    addDoctorPatientRecord(entity: AddDoctorPatientRecordModel): Promise<any>;
    checkPatientRecord(entity: AddDoctorPatientRecordModel): Promise<any>;
    getAllPatientRecords(entity: User): Promise<any>;
    getAllDoctorsRecords(entity: User): Promise<any>;
    checkDoctorAndPatientExists(entity: AddDoctorPatientRecordModel): Promise<any>;
    addDoctorRecipe(entity: RecipeModel): Promise<any>;
    getDrugId(entity: GetDrugByNameModel): Promise<any>;
    getClinicsId(entity: GetClinicsByNameModel): Promise<any>;
    getClinicsNameById(entity: ClinicsModel): Promise<any>;
    getDrugNameById(entity: DrugsModel): Promise<any>;
    getReceptByDoctorEmail(entity: User): Promise<any>;
    getReceptByUserEmail(entity: User): Promise<any>;
    getDoctorIdByEmail(entity: User): Promise<any>;
    getPatientsId(entity: User): Promise<any>;
    getUserInfoById(entity: User): Promise<any>;
    getUserIdByFirstLastName(entity: UserInfoModel): Promise<any>;
    getDoctorInfoById(entity: string): Promise<any>;
    getUsersInfoById(entity: string): Promise<any>;
}
